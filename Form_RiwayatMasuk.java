/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.raven.form;

import com.raven.table.TableCustom;
import Connection.DatabaseConnection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author MUTIARA
 */
public class Form_RiwayatMasuk extends javax.swing.JPanel {

    /**
     * Creates new form Form_RiwayatMasuk
     */
    public Form_RiwayatMasuk() {
        initComponents();
        TableCustom.apply(Scroll, TableCustom.TableType.DEFAULT);
        TableCustom.apply(scroll, TableCustom.TableType.DEFAULT);
        loadMainTable();
        uang.setText(String.valueOf(getTotalPengeluaran()));
    }

    public int getTotalPengeluaran() {
        String query = "SELECT SUM(total) AS total_transaksi " +
               "FROM pemasukan_barang";

        try {
            ResultSet rs = DatabaseConnection.getData(query);

            rs.next();
            
            return rs.getInt("total_transaksi");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error saat menghitung total transaksi: " + e.getMessage());
        }
        return 0;
    }
    public void loadMainTable() {
        try {
            String query = "SELECT pb.id AS id_pemasukan, pb.total, pb.catatan, pb.tanggal " +
               "FROM pemasukan_barang pb;";

            ResultSet rs = DatabaseConnection.getData(query);

            DefaultTableModel mainTableModel = (DefaultTableModel) MainTable.getModel();
            mainTableModel.setRowCount(0);  

            while (rs.next()) {
                String idPemasukan = rs.getString("id_pemasukan");
                int total = rs.getInt("total");
                String catatan = rs.getString("catatan");
                Timestamp tanggal = rs.getTimestamp("tanggal");

                mainTableModel.addRow(new Object[]{idPemasukan, String.valueOf(total), catatan, tanggal});
            }

            MainTable.getSelectionModel().addListSelectionListener(e -> {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = MainTable.getSelectedRow();
                    if (selectedRow != -1) {
                        String idPemasukan = (String) MainTable.getValueAt(selectedRow, 0);
                        loadSecondTable(idPemasukan);  // Panggil fungsi untuk load data detail barang
                    }
                }
            });

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error saat memuat data pemasukan barang: " + e.getMessage());
        }
    }

    public void loadSecondTable(String idPemasukan) {
        try {
            String query = "SELECT dpb.id_barang, b.nama AS nama_barang, dpb.harga, dpb.qty, dpb.subtotal " +
               "FROM detail_pemasukan_barang dpb " +
               "JOIN barang b ON dpb.id_barang = b.id " +
               "WHERE dpb.id_pemasukan_barang = ?;";

            PreparedStatement ps = DatabaseConnection.getConn().prepareStatement(query);
            ps.setString(1, idPemasukan); 

            ResultSet rs = ps.executeQuery();

            DefaultTableModel secondTableModel = (DefaultTableModel) SecondTable.getModel();
            secondTableModel.setRowCount(0); 

            while (rs.next()) {
                String idBarang = rs.getString("id_barang");
                String namaBarang = rs.getString("nama_barang");
                double harga = rs.getDouble("harga");
                int qty = rs.getInt("qty");
                int subtotal = rs.getInt("subtotal");

                secondTableModel.addRow(new Object[]{idBarang, namaBarang, harga, qty, subtotal});
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error saat memuat detail pemasukan barang: " + e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Scroll = new javax.swing.JScrollPane();
        MainTable = new javax.swing.JTable();
        scroll = new javax.swing.JScrollPane();
        SecondTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        uang = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(182, 234, 234));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Riwayat Barang Masuk");
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));

        MainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TOTAL", "CATATAN", "TANGGAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MainTableMouseClicked(evt);
            }
        });
        Scroll.setViewportView(MainTable);

        SecondTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAMA", "HARGA", "SUBTOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll.setViewportView(SecondTable);

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("<Barang Masuk>");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("<Detail Barang>");

        uang.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        uang.setForeground(new java.awt.Color(102, 102, 102));
        uang.setText("0");

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Total Pengeluaran = ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 1050, Short.MAX_VALUE)
                            .addComponent(scroll)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(uang)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addComponent(jLabel5)
                    .addContainerGap(902, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addComponent(uang)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(618, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void MainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainTableMouseClicked
        int selectedRow = MainTable.getSelectedRow();

        if (selectedRow >= 0) {
            String kodeTransaksi = MainTable.getValueAt(selectedRow, 0).toString();
            loadSecondTable(kodeTransaksi);
        }
    }//GEN-LAST:event_MainTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MainTable;
    private javax.swing.JScrollPane Scroll;
    private javax.swing.JTable SecondTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JLabel uang;
    // End of variables declaration//GEN-END:variables
}
