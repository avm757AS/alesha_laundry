
package com.raven.form;
import Connection.DatabaseConnection;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.raven.utils.GenerateDetailTransaksiId;
import java.sql.PreparedStatement;
import com.raven.utils.GeneratePengeluaranBarangTransaksiId;
import com.raven.utils.GenerateTransaksiId;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.pdf.codec.Base64;
import com.itextpdf.text.pdf.draw.VerticalPositionMark;
import com.raven.table.TableCustom;
import java.awt.Desktop;
import java.io.ByteArrayOutputStream;
import net.glxn.qrgen.QRCode;

import java.io.File;
import java.io.FileOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import com.raven.utils.ItemLayanan;
import com.raven.utils.ThermalPrinterUtil;
import com.raven.utils.User;
public class Form_Transaksi extends javax.swing.JPanel {

    private List<String> idLay = new ArrayList<>();
    private List<String> selectedIdLayananList = new ArrayList<>();
    public Form_Transaksi() {
        initComponents();
        loadNamaBarang();
        kode.setText(GenerateTransaksiId.GetId());
        TableCustom.apply(Scroll, TableCustom.TableType.DEFAULT);
        TableCustom.apply(scroll, TableCustom.TableType.DEFAULT);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        hargaText = new javax.swing.JTextField();
        kode = new javax.swing.JLabel();
        kode1 = new javax.swing.JLabel();
        layananText = new javax.swing.JComboBox<>();
        kode2 = new javax.swing.JLabel();
        qtyText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        kode3 = new javax.swing.JLabel();
        nohpText = new javax.swing.JTextField();
        kode4 = new javax.swing.JLabel();
        namaText = new javax.swing.JTextField();
        kode5 = new javax.swing.JLabel();
        bayarText = new javax.swing.JTextField();
        kode6 = new javax.swing.JLabel();
        kembalianText = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        scroll = new javax.swing.JScrollPane();
        MainTable = new javax.swing.JTable();
        Scroll = new javax.swing.JScrollPane();
        SecondTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(182, 234, 234));

        jPanel1.setBackground(new java.awt.Color(182, 234, 234));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Transaksi");
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));

        hargaText.setBackground(new java.awt.Color(255, 153, 153));
        hargaText.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        hargaText.setForeground(new java.awt.Color(102, 102, 102));

        kode.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        kode.setText("No Transaksi");

        kode1.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        kode1.setText("Nama Layanan");

        layananText.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        kode2.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        kode2.setText("Jumlah");

        qtyText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyTextKeyTyped(evt);
            }
        });

        jButton1.setText("Simpan");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Hapus");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        kode3.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        kode3.setText("No Hp ");

        kode4.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        kode4.setText("Nama");

        namaText.setEnabled(false);

        kode5.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        kode5.setText("Pembayaran");

        bayarText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayarTextActionPerformed(evt);
            }
        });

        kode6.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        kode6.setText("Kembalian");

        kembalianText.setEnabled(false);

        jButton3.setText("Bayar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Check");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Simpan");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        MainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAMA LAYANAN", "HARGA", "JUMLAH", "SUBTOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll.setViewportView(MainTable);
        if (MainTable.getColumnModel().getColumnCount() > 0) {
            MainTable.getColumnModel().getColumn(0).setMaxWidth(150);
        }

        SecondTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAMA BARANG", "JUMLAH"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Scroll.setViewportView(SecondTable);
        if (SecondTable.getColumnModel().getColumnCount() > 0) {
            SecondTable.getColumnModel().getColumn(0).setMaxWidth(200);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(kode1)
                                .addGap(18, 18, 18)
                                .addComponent(layananText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(kode2)
                                .addGap(18, 18, 18)
                                .addComponent(qtyText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(kode)
                                .addGap(524, 524, 524)
                                .addComponent(hargaText)))
                        .addGap(143, 143, 143))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(kode3)
                            .addComponent(kode4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(nohpText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jButton4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(namaText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(kode6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(kembalianText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(kode5)
                                .addGap(18, 18, 18)
                                .addComponent(bayarText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(66, 66, 66)
                        .addComponent(jButton3)
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                        .addGap(26, 26, 26)
                        .addComponent(Scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                        .addGap(23, 23, 23))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(kode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(hargaText)
                        .addGap(29, 29, 29)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kode1)
                    .addComponent(layananText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kode2)
                    .addComponent(qtyText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addComponent(Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(164, 164, 164)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kode3)
                    .addComponent(nohpText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kode5)
                    .addComponent(bayarText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kode4)
                    .addComponent(namaText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kode6)
                    .addComponent(kembalianText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public File generateStrukPDF(
        String tanggalWaktu,
        String namaKasir,
        String kodeTransaksi,
        List<ItemLayanan> items,
        int totalQty,
        int subtotal,
        int total,
        int bayar,
        int kembali
    ) throws Exception {

        Document document = new Document(new Rectangle(180, 700), 10, 10, 10, 10);
        float lebarKertas = 180f; 
        float marginKiriKanan = 10f; 
        float totalLebarTabel = lebarKertas - 2 * marginKiriKanan;
        File file = new File("struk_" + kodeTransaksi + ".pdf");
        PdfWriter.getInstance(document, new FileOutputStream(file));
        document.open();

        // Font
        Font titleFont = new Font(Font.FontFamily.HELVETICA, 11, Font.BOLD);
        Font alamatFont = new Font(Font.FontFamily.HELVETICA, 8, Font.UNDERLINE);
        Font bold = new Font(Font.FontFamily.HELVETICA, 8, Font.BOLD);
        Font normal = new Font(Font.FontFamily.HELVETICA, 8);
        Font italic = new Font(Font.FontFamily.HELVETICA, 8, Font.ITALIC);

        // QR Code
        ByteArrayOutputStream qrOut = QRCode.from(kodeTransaksi).withSize(80, 80).stream();
        Image qrImage = Image.getInstance(qrOut.toByteArray());
        qrImage.setAlignment(Element.ALIGN_CENTER);
        document.add(qrImage);

        // Judul
        Paragraph header = new Paragraph("LAUNDRY ALESHA", titleFont);
        header.setAlignment(Element.ALIGN_CENTER);
        document.add(header);

        Paragraph alamatToko = new Paragraph("Jl. Mastrip No.69, Krajan Barat, Sumbersari, Kec Sumbersari, Kabupaten Jember", alamatFont);
        alamatToko.setAlignment(Element.ALIGN_CENTER);
        document.add(alamatToko);

        document.add(new Paragraph(".......................................................................", normal));

        // Info umum
        PdfPTable rowinfo = alignKiriKanan(tanggalWaktu, namaKasir, normal, normal, totalLebarTabel);
        document.add(rowinfo);

        document.add(new Paragraph("\nNo." + kodeTransaksi, bold));
         document.add(new Paragraph(".......................................................................", normal));

        // Layanan
        int index = 1;
        for (ItemLayanan item : items) {
            Paragraph nama = new Paragraph(index++ + ". " + item.getNamaLayanan(), bold);
            document.add(nama);
            
            PdfPTable detail = alignKiriKanan(item.getDetail() + " Kg","Rp. " + item.getHarga(), normal, normal, totalLebarTabel);
            document.add(detail);
        }

        document.add(new Paragraph("........................................................", normal));
        document.add(new Paragraph("Total QTY : " + totalQty, normal));

        PdfPTable rowsub = alignKiriKanan("Sub Total", "Rp. " + formatRupiah(subtotal), normal, normal, totalLebarTabel);
        document.add(rowsub);
        PdfPTable rowtot = alignKiriKanan("Total", "Rp. " + formatRupiah(total), normal, normal, totalLebarTabel);
        document.add(rowtot);
        PdfPTable rowbay = alignKiriKanan("Bayar (cash)", "Rp. " + formatRupiah(bayar), normal, normal, totalLebarTabel);
        document.add(rowbay);
        PdfPTable rowkem = alignKiriKanan("Bayar (cash)", "Rp. " + formatRupiah(bayar), normal, normal, totalLebarTabel);
        document.add(rowkem);
//        document.add(alignKiriKanan("Sub Total", "Rp. " + formatRupiah(subtotal), normal, normal));
//        document.add(alignKiriKanan("Total", "Rp. " + formatRupiah(total), bold, bold));
//        document.add(alignKiriKanan("Bayar (cash)", "Rp. " + formatRupiah(bayar), normal, normal));
//        document.add(alignKiriKanan("Kembali", "Rp. " + formatRupiah(kembali), normal, normal));

        Paragraph thanks = new Paragraph("\nTerimakasih telah laundry", italic);
        thanks.setAlignment(Element.ALIGN_CENTER);
        document.add(thanks);

        Paragraph kritik = new Paragraph("Link kritik dan saran", italic);
        kritik.setAlignment(Element.ALIGN_CENTER);
        document.add(kritik);

        Paragraph link = new Paragraph("//jeuewobsi.hdheiebe:kehi$:$/://", italic);
        link.setAlignment(Element.ALIGN_CENTER);
        document.add(link);
        
        // Image logo = Image.getInstance("path/logo.png");
        // logo.scaleToFit(50, 50);
        // logo.setAlignment(Element.ALIGN_CENTER);
        // document.add(logo);

        document.close();
        return file;
    }

    // Format angka ke rupiah
    private String formatRupiah(Object harga) {
        try {
            int value = Integer.parseInt(harga.toString());
            return String.format("%,d", value).replace(',', '.');
        } catch (Exception e) {
            return harga.toString();
        }
    }

    // Utility untuk paragraf kiri-kanan
//    private Paragraph alignKiriKanan(String left, String right, Font leftFont, Font rightFont) {
//        Chunk leftChunk = new Chunk(left, leftFont);
//        Chunk rightChunk = new Chunk(right, rightFont);
//        Paragraph p = new Paragraph();
//        p.add(leftChunk);
//
//        float spacing = 120 - (left.length() * 2f); // atur sesuai kebutuhan
//        p.add(new Chunk(new VerticalPositionMark(), spacing, true));
//        p.add(rightChunk);
//        return p;
//    }
    
    private PdfPTable alignKiriKanan(String left, String right, Font leftFont, Font rightFont, float totalWidth) {
        PdfPTable table = new PdfPTable(2);
        table.setTotalWidth(totalWidth);
        table.setLockedWidth(true); // agar tidak berubah ukurannya
        table.getDefaultCell().setBorder(Rectangle.NO_BORDER);

        PdfPCell leftCell = new PdfPCell(new Phrase(left, leftFont));
        leftCell.setBorder(Rectangle.NO_BORDER);
        leftCell.setHorizontalAlignment(Element.ALIGN_LEFT);

        PdfPCell rightCell = new PdfPCell(new Phrase(right, rightFont));
        rightCell.setBorder(Rectangle.NO_BORDER);
        rightCell.setHorizontalAlignment(Element.ALIGN_RIGHT);

        table.addCell(leftCell);
        table.addCell(rightCell);

        return table;
    }



    
    private String generateNewDetailTransaksiId() {
        DefaultTableModel mainTableModel = (DefaultTableModel) MainTable.getModel();
        if (mainTableModel.getRowCount() == 0) {
            return GenerateDetailTransaksiId.GetId();
        } else {
            String lastId = mainTableModel.getValueAt(mainTableModel.getRowCount() - 1, 0).toString();
            int lastNumber = Integer.parseInt(lastId.substring(3)); // Hilangkan prefix "DTR"

            int newNumber = lastNumber + 1;
            return "DTR" + String.format("%02d", newNumber);
        }
    }
    int CalculateHarga() {
        int harga = 0;
        DefaultTableModel mainTableModel = (DefaultTableModel) MainTable.getModel();
        for(int i = 0; i < MainTable.getRowCount(); i++) {
            harga += Integer.valueOf(mainTableModel.getValueAt(i, 4).toString());
        }
        return harga;
    }
    private void addBarangToSecondTable(String idLayanan, int qtyLayanan) {
        try {
            String query = "SELECT pl.id_barang, pl.qty, b.nama " +
               "FROM pengeluaran_layanan pl " +
               "JOIN barang b ON pl.id_barang = b.id " +
               "WHERE pl.id_layanan = ?";
 
            PreparedStatement ps = DatabaseConnection.getConn().prepareStatement(query);
            ps.setString(1, idLayanan);

            ResultSet rs = ps.executeQuery();

            DefaultTableModel secondTableModel = (DefaultTableModel) SecondTable.getModel();

            while (rs.next()) {
                String idBarang = rs.getString("id_barang");
                String namaBarang = rs.getString("nama");
                int qtyBarang = rs.getInt("qty") * qtyLayanan;

                boolean isBarangExist = false;

                for (int i = 0; i < secondTableModel.getRowCount(); i++) {
                    String existingIdBarang = secondTableModel.getValueAt(i, 0).toString();
                    if (existingIdBarang.equals(idBarang)) {
                        int existingQty = Integer.parseInt(secondTableModel.getValueAt(i, 2).toString());
                        secondTableModel.setValueAt(qtyBarang + existingQty, i, 2);
                        isBarangExist = true;
                        break;
                    }
                }

                if (!isBarangExist) {
                    secondTableModel.addRow(new Object[]{idBarang, namaBarang, qtyBarang});
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error saat memproses barang: " + e.getMessage());
        }
    }

    void loadNamaBarang()
    {
        DefaultComboBoxModel mdl = new DefaultComboBoxModel();
        try{
            String query = "select * from layanan";
            ResultSet rs = DatabaseConnection.getData(query);
            while(rs.next()){
                idLay.add(rs.getString("id"));
                mdl.addElement(rs.getString("nama"));
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, e.toString());
        }
        layananText.setModel(mdl);
    }
    private void qtyTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyTextKeyTyped
        char input = evt.getKeyChar();

        if(!Character.isDigit(input)){
            evt.consume();
        }
    }//GEN-LAST:event_qtyTextKeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedRow = MainTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Silakan pilih baris yang ingin dihapus.");
            return;
        }

        try {
            DefaultTableModel mainTableModel = (DefaultTableModel) MainTable.getModel();
            String idLayanan = selectedIdLayananList.get(selectedRow);
            int qtyToRemove = Integer.parseInt(mainTableModel.getValueAt(selectedRow, 3).toString());

            mainTableModel.removeRow(selectedRow);
            selectedIdLayananList.remove(selectedRow);

            updateSecondTableAfterDelete(idLayanan, qtyToRemove);

            JOptionPane.showMessageDialog(this, "Baris berhasil dihapus.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error saat menghapus baris: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void updateSecondTableAfterDelete(String idLayanan, int qtyToRemove) {
        try {
            String query = "SELECT pl.id_barang, pl.qty " +
               "FROM pengeluaran_layanan pl " +
               "WHERE pl.id_layanan = ?";

            PreparedStatement ps = DatabaseConnection.getConn().prepareStatement(query);
            ps.setString(1, idLayanan);

            ResultSet rs = ps.executeQuery();
            DefaultTableModel secondTableModel = (DefaultTableModel) SecondTable.getModel();

            while (rs.next()) {
                String idBarang = rs.getString("id_barang");
                int qtyBarangToRemove = rs.getInt("qty") * qtyToRemove;

                for (int i = 0; i < secondTableModel.getRowCount(); i++) {
                    String existingIdBarang = secondTableModel.getValueAt(i, 0).toString();
                    if (existingIdBarang.equals(idBarang)) {
                        int existingQty = Integer.parseInt(secondTableModel.getValueAt(i, 2).toString());
                        int newQty = existingQty - qtyBarangToRemove;

                        if (newQty > 0) {
                            secondTableModel.setValueAt(newQty, i, 2);
                        } else {
                            secondTableModel.removeRow(i);
                        }
                        break;
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error saat memperbarui SecondTable: " + e.getMessage());
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         if(!qtyText.getText().equals("")) {
            try {
                int selectedIndex = layananText.getSelectedIndex();
                if (selectedIndex < 0) {
                    JOptionPane.showMessageDialog(this, "Silakan pilih layanan terlebih dahulu.");
                    return;
                }

                String idLayanan = idLay.get(selectedIndex);

                String query = "SELECT nama, harga FROM layanan WHERE id = '" + idLayanan + "'";
                ResultSet rs = DatabaseConnection.getData(query);

                if (rs.next()) {
                    String nama = rs.getString("nama");
                    int harga = rs.getInt("harga");
                    int qty = Integer.parseInt(qtyText.getText());
                    int subtotal = harga * qty;

                    DefaultTableModel mainTableModel = (DefaultTableModel) MainTable.getModel();
                    boolean isLayananExist = false;

                    for (int i = 0; i < selectedIdLayananList.size(); i++) {
                        if (selectedIdLayananList.get(i).equals(idLayanan)) {
                            //int existingQty = Integer.parseInt(mainTableModel.getValueAt(i, 3).toString());
                            int newQty = qty;
                            int newSubtotal = harga * newQty;

                            mainTableModel.setValueAt(newQty, i, 3);
                            mainTableModel.setValueAt(newSubtotal, i, 4);
                            addBarangToSecondTable(idLayanan, qty);

                            isLayananExist = true;
                            break;
                        }
                    }

                    if (!isLayananExist) {
                        String newDetailTransaksiId = generateNewDetailTransaksiId();
                        mainTableModel.addRow(new Object[]{newDetailTransaksiId, nama, String.valueOf(harga), String.valueOf(qty), String.valueOf(subtotal)});

                        selectedIdLayananList.add(idLayanan);
                        addBarangToSecondTable(idLayanan, qty);
                    }
                    hargaText.setText(String.valueOf(CalculateHarga()));
                } else {
                    JOptionPane.showMessageDialog(this, "Layanan tidak ditemukan.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error4: " + e.getMessage());
            }

        }else{
            JOptionPane.showMessageDialog(this, "Quantity Wajib Diisi");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try{
            String idPelangganQuery = "SELECT id, nama FROM pelanggan WHERE no_hp = ?";
            PreparedStatement ps = DatabaseConnection.getConn().prepareStatement(idPelangganQuery);
            ps.setString(1, nohpText.getText());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                namaText.setText(rs.getString("nama"));
            }else{
                int result = JOptionPane.showConfirmDialog(null, "Pelanggan Tidak Ditemukan. Tambahkan Pelanggan?", "Confirmation", JOptionPane.YES_NO_OPTION);
                if(result == JOptionPane.YES_OPTION){
                    TambahPelanggan form = new TambahPelanggan();
                    form.show();
                }
            }
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
      DefaultTableModel mainTableModel = (DefaultTableModel) MainTable.getModel();

        if(mainTableModel.getRowCount() == -1) {
            JOptionPane.showMessageDialog(this, "Silahkan Pilih Layanan Terlebih Dahulu");
            return;
        }
        try {
            String nohp = nohpText.getText().trim();
            if (nohp.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nomor HP wajib diisi.");
                return;
            }

            String idPelangganQuery = "SELECT id FROM pelanggan WHERE no_hp = ?";
            PreparedStatement ps = DatabaseConnection.getConn().prepareStatement(idPelangganQuery);
            ps.setString(1, nohp);
            ResultSet rs = ps.executeQuery();

            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "Nomor HP tidak ditemukan dalam database pelanggan.");
                return;
            }

            String idPelanggan = rs.getString("id");

            String kodeTransaksi = kode.getText().trim();

            String insertTransaksiQuery = "INSERT INTO transaksi (kode, id_pelanggan, tanggal, status) " +
                              "VALUES (?, ?, ?, ?)";

            PreparedStatement transaksiPs = DatabaseConnection.getConn().prepareStatement(insertTransaksiQuery);
            transaksiPs.setString(1, kodeTransaksi);
            transaksiPs.setString(2, idPelanggan);
            transaksiPs.setTimestamp(3, new java.sql.Timestamp(new java.util.Date().getTime())); // Tanggal sekarang
            transaksiPs.setString(4, "proses");
            transaksiPs.executeUpdate();

            String insertDetailTransaksiQuery = "INSERT INTO detail_transaksi (id, kode_transaksi, id_layanan, harga, qty, subtotal) " +
                                    "VALUES (?, ?, ?, ?, ?, ?)";

            PreparedStatement detailPs = DatabaseConnection.getConn().prepareStatement(insertDetailTransaksiQuery);

            for (int i = 0; i < mainTableModel.getRowCount(); i++) {
                String idDet = mainTableModel.getValueAt(i, 0).toString();
                String idLayanan = selectedIdLayananList.get(i);
                int harga = Integer.parseInt(mainTableModel.getValueAt(i, 2).toString());
                int qty = Integer.parseInt(mainTableModel.getValueAt(i, 3).toString());
                int subtotal = Integer.parseInt(mainTableModel.getValueAt(i, 4).toString());

                detailPs.setString(1, idDet);
                detailPs.setString(2, kodeTransaksi);
                detailPs.setString(3, idLayanan);
                detailPs.setInt(4, harga);
                detailPs.setInt(5, qty);
                detailPs.setInt(6, subtotal);
                detailPs.addBatch();
            }

            detailPs.executeBatch();

            DefaultTableModel secondTableModel = (DefaultTableModel) SecondTable.getModel();
            String insertPengeluaranBarangQuery = "INSERT INTO pengeluaran_barang_transaksi (id, kode_transaksi, id_barang, qty) " +
                                      "VALUES (?, ?, ?, ?)";

            PreparedStatement pengeluaranPs = DatabaseConnection.getConn().prepareStatement(insertPengeluaranBarangQuery);

            for (int i = 0; i < secondTableModel.getRowCount(); i++) {
                String idBarang = secondTableModel.getValueAt(i, 0).toString();
                int qty = Integer.parseInt(secondTableModel.getValueAt(i, 2).toString());

                // Cek stok barang
                String checkStokQuery = "SELECT stok FROM barang WHERE id = ?";
                PreparedStatement checkStokPs = DatabaseConnection.getConn().prepareStatement(checkStokQuery);
                checkStokPs.setString(1, idBarang);
                ResultSet stokRs = checkStokPs.executeQuery();

                if (stokRs.next()) {
                    int stok = stokRs.getInt("stok");
                    if (stok < qty) {
                        JOptionPane.showMessageDialog(this, "Stok barang tidak mencukupi untuk ID Barang: " + idBarang);
                        kode.setText(GenerateTransaksiId.GetId());
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Barang tidak ditemukan untuk ID: " + idBarang);
                    return;
                }

                // Proses pengurangan stok
                pengeluaranPs.setString(1, GeneratePengeluaranBarangTransaksiId.GetId());
                pengeluaranPs.setString(2, kodeTransaksi);
                pengeluaranPs.setString(3, idBarang);
                pengeluaranPs.setInt(4, qty);
                pengeluaranPs.executeUpdate();
            }

            JOptionPane.showMessageDialog(this, "Transaksi berhasil disimpan.");
            mainTableModel.setRowCount(0);
            secondTableModel.setRowCount(0);
            nohpText.setText("");
            namaText.setText("");
            selectedIdLayananList.clear();
            kode.setText(GenerateTransaksiId.GetId());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void bayarTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayarTextActionPerformed
        if(Integer.valueOf(hargaText.getText()) <= Integer.valueOf(bayarText.getText())){
            int a = Integer.valueOf(bayarText.getText()) - Integer.valueOf(hargaText.getText());
            kembalianText.setText(String.valueOf(a));
        }
    }//GEN-LAST:event_bayarTextActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(Integer.valueOf(hargaText.getText()) > Integer.valueOf(bayarText.getText())) {
            JOptionPane.showMessageDialog(this, "Uang Kurang");
        }else{
            DefaultTableModel mainTableModel = (DefaultTableModel) MainTable.getModel();

            if(mainTableModel.getRowCount() == -1) {
                JOptionPane.showMessageDialog(this, "Silahkan Pilih Layanan Terlebih Dahulu");
                return;
            }
            try {
                String nohp = nohpText.getText().trim();
                if (nohp.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Nomor HP wajib diisi.");
                    return;
                }

                String idPelangganQuery = "SELECT id FROM pelanggan WHERE no_hp = ?";
                PreparedStatement ps = DatabaseConnection.getConn().prepareStatement(idPelangganQuery);
                ps.setString(1, nohp);
                ResultSet rs = ps.executeQuery();

                if (!rs.next()) {
                    JOptionPane.showMessageDialog(this, "Nomor HP tidak ditemukan dalam database pelanggan.");
                    return;
                }

                String idPelanggan = rs.getString("id");

                String kodeTransaksi = kode.getText().trim();

                String insertTransaksiQuery = "INSERT INTO transaksi (kode, id_pelanggan, tanggal, status) " +
                              "VALUES (?, ?, ?, ?)";

                PreparedStatement transaksiPs = DatabaseConnection.getConn().prepareStatement(insertTransaksiQuery);
                transaksiPs.setString(1, kodeTransaksi);
                transaksiPs.setString(2, idPelanggan);
                transaksiPs.setTimestamp(3, new java.sql.Timestamp(new java.util.Date().getTime())); // Tanggal sekarang
                transaksiPs.setString(4, "proses");
                transaksiPs.executeUpdate();

                String insertDetailTransaksiQuery = "INSERT INTO detail_transaksi (id, kode_transaksi, id_layanan, harga, qty, subtotal) " +
                                    "VALUES (?, ?, ?, ?, ?, ?)";

                PreparedStatement detailPs = DatabaseConnection.getConn().prepareStatement(insertDetailTransaksiQuery);

                for (int i = 0; i < mainTableModel.getRowCount(); i++) {
                    String idDet = mainTableModel.getValueAt(i, 0).toString();
                    String idLayanan = selectedIdLayananList.get(i);
                    int harga = Integer.parseInt(mainTableModel.getValueAt(i, 2).toString());
                    int qty = Integer.parseInt(mainTableModel.getValueAt(i, 3).toString());
                    int subtotal = Integer.parseInt(mainTableModel.getValueAt(i, 4).toString());

                    detailPs.setString(1, idDet);
                    detailPs.setString(2, kodeTransaksi);
                    detailPs.setString(3, idLayanan);
                    detailPs.setInt(4, harga);
                    detailPs.setInt(5, qty);
                    detailPs.setInt(6, subtotal);
                    detailPs.addBatch();
                }

                detailPs.executeBatch();

                DefaultTableModel secondTableModel = (DefaultTableModel) SecondTable.getModel();
                String insertPengeluaranBarangQuery = "INSERT INTO pengeluaran_barang_transaksi (id, kode_transaksi, id_barang, qty) " +
                                      "VALUES (?, ?, ?, ?)";


                PreparedStatement pengeluaranPs = DatabaseConnection.getConn().prepareStatement(insertPengeluaranBarangQuery);

                for (int i = 0; i < secondTableModel.getRowCount(); i++) {
                    String idBarang = secondTableModel.getValueAt(i, 0).toString();
                    int qty = Integer.parseInt(secondTableModel.getValueAt(i, 2).toString());

                    // Cek stok barang
                    String checkStokQuery = "SELECT stok FROM barang WHERE id = ?";
                    PreparedStatement checkStokPs = DatabaseConnection.getConn().prepareStatement(checkStokQuery);
                    checkStokPs.setString(1, idBarang);
                    ResultSet stokRs = checkStokPs.executeQuery();

                    if (stokRs.next()) {
                        int stok = stokRs.getInt("stok");
                        if (stok < qty) {
                            JOptionPane.showMessageDialog(this, "Stok barang tidak mencukupi untuk ID Barang: " + idBarang);
                            kode.setText(GenerateTransaksiId.GetId());
                            return;
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Barang tidak ditemukan untuk ID: " + idBarang);
                        return;
                    }

                    // Proses pengurangan stok
                    pengeluaranPs.setString(1, GeneratePengeluaranBarangTransaksiId.GetId());
                    pengeluaranPs.setString(2, kodeTransaksi);
                    pengeluaranPs.setString(3, idBarang);
                    pengeluaranPs.setInt(4, qty);
                    pengeluaranPs.executeUpdate();
                }
                LocalDateTime sekarang = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
                String formattedDateTime = sekarang.format(formatter);
                List<ItemLayanan> items = new ArrayList<>();
                for(int j = 0; j < MainTable.getRowCount(); j++){
                    items.add(new ItemLayanan(mainTableModel.getValueAt(j, 1).toString(), mainTableModel.getValueAt(j, 3).toString(), mainTableModel.getValueAt(j, 2).toString()));
                }
                int totalqty = 0;
                for(int k = 0; k < MainTable.getRowCount(); k++){
                    totalqty += Integer.valueOf(mainTableModel.getValueAt(k, 3).toString());
                }
                int total = Integer.valueOf(hargaText.getText());
                int bayar = Integer.valueOf(bayarText.getText());
                int kembalian = Integer.valueOf(kembalianText.getText());
                File pdf = generateStrukPDF(
                        formattedDateTime,
                        User.getNama(),
                        kodeTransaksi,
                        items,
                        totalqty,
                        total,
                        total,
                        bayar,
                        kembalian
                   );
                Desktop.getDesktop().open(pdf);
                //ThermalPrinterUtil.printToThermalPrinter(pdf, kodeTransaksi);
                
               
                JOptionPane.showMessageDialog(this, "Transaksi berhasil disimpan.");
                mainTableModel.setRowCount(0);
                secondTableModel.setRowCount(0);
                nohpText.setText("");
                namaText.setText("");
                selectedIdLayananList.clear();
                kode.setText(GenerateTransaksiId.GetId());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: ss" + e.getMessage());
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    
    
    
                             

    
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MainTable;
    private javax.swing.JScrollPane Scroll;
    private javax.swing.JTable SecondTable;
    private javax.swing.JTextField bayarText;
    private javax.swing.JTextField hargaText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField kembalianText;
    private javax.swing.JLabel kode;
    private javax.swing.JLabel kode1;
    private javax.swing.JLabel kode2;
    private javax.swing.JLabel kode3;
    private javax.swing.JLabel kode4;
    private javax.swing.JLabel kode5;
    private javax.swing.JLabel kode6;
    private javax.swing.JComboBox<String> layananText;
    private javax.swing.JTextField namaText;
    private javax.swing.JTextField nohpText;
    private javax.swing.JTextField qtyText;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables
}
